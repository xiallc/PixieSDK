cmake_minimum_required(VERSION 3.10)
project(Pixie-SDK)

if (${CMAKE_SYSTEM_NAME} MATCHES "Linux" OR ${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    message(STATUS "${CMAKE_SYSTEM_NAME} is a supported environment.")
else ()
    message(FATAL_ERROR "${CMAKE_SYSTEM_NAME} is an unsupported environment!")
endif ()

if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
        set(BASE_INSTALL_PATH ${CMAKE_INSTALL_PREFIX})
    else()
        set(BASE_INSTALL_PATH "C:/Program Files")
    endif ()
    set(CMAKE_INSTALL_PREFIX "${BASE_INSTALL_PATH}/xia/pixie-16/pixie-sdk" CACHE PATH "..." FORCE)
endif (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
message(STATUS "Install Path: ${CMAKE_INSTALL_PREFIX}")

if (NOT CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE MATCHES "MinSizeRel")
    set(CMAKE_BUILD_TYPE Release CACHE STRING
        "Build type, options are: Debug Release RelWithDebInfo." FORCE)
endif (NOT CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE MATCHES "MinSizeRel")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")

if (${CMAKE_CXX_COMPILER_ID} STREQUAL GNU)
    string(REGEX REPLACE "-O3" "-O2" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    string(REGEX REPLACE "-O3" "-O2" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O2")
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -O2")
elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
    string(REGEX REPLACE "Ob0" "Ob2" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
    string(REGEX REPLACE "Ob0" "Ob2" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
    string(REGEX REPLACE "/Od" "" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
    string(REGEX REPLACE "/Od" "" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
    string(REGEX REPLACE "/RTC1" "" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
    string(REGEX REPLACE "/RTC1" "" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /O2")
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /O2")
endif ()

list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake/modules/;${PROJECT_SOURCE_DIR}/cmake/functions")
include(xia_configure_target)
include(CMakeDependentOption)

option(BUILD_EXAMPLES "Builds the example programs" ON)
option(BUILD_SDK "Builds the base SDK library - PixieSdk.a" ON)
option(BUILD_TESTS "Builds the test suites" ON)
option(BUILD_32BIT "Tells system that we're in a 32-bit build environment" OFF)

cmake_dependent_option(BUILD_INTEGRATION_TESTS "Builds integration tests" ON "BUILD_TESTS;BUILD_SDK" OFF)
cmake_dependent_option(BUILD_PIXIE16_API "Builds user API library - libPixie16Api.so" ON "BUILD_SDK" OFF)
cmake_dependent_option(BUILD_SYSTEM_TESTS "Enables build of system tests" ON "BUILD_TESTS;BUILD_SDK" OFF)
cmake_dependent_option(BUILD_SDK_UNIT_TESTS "Builds unit tests" ON "BUILD_TESTS;BUILD_SDK" OFF)

add_subdirectory(cmake)

if (BUILD_SDK)
    find_package(BroadcomAPI REQUIRED)
    IF (${CMAKE_VERSION} VERSION_LESS "3.13")
        link_directories(${PLX_LIBRARY_DIR})
    ENDIF (${CMAKE_VERSION} VERSION_LESS "3.13")

    add_subdirectory(sdk)

    if (BUILD_TESTS)
        add_subdirectory(tests)
    endif ()

    if (BUILD_EXAMPLES)
        add_subdirectory(examples)
    endif ()

    add_subdirectory(externals)
    add_subdirectory(tools)
endif ()